#include <Adafruit_MotorShield.h>
#include <hp_BH1750.h>  //light sensor

#define IR_PIN_1 A0
#define IR_PIN_2 A1
#define IR_PIN_3 A2
#define IR_PIN_4 A3
#define LEFT_MOTOR_PIN_1 1
#define LEFT_MOTOR_PIN_2 2
#define RIGHT_MOTOR_PIN_3 3
#define RIGHT_MOTOR_PIN_4 4

Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *FRONT_LEFT_MOTOR = AFMS.getMotor(LEFT_MOTOR_PIN_1);
Adafruit_DCMotor *BACK_LEFT_MOTOR = AFMS.getMotor(LEFT_MOTOR_PIN_2);
Adafruit_DCMotor *BACK_RIGHT_MOTOR = AFMS.getMotor(RIGHT_MOTOR_PIN_3);
Adafruit_DCMotor *FRONT_RIGHT_MOTOR = AFMS.getMotor(RIGHT_MOTOR_PIN_4);

int left_outer_sensor;
int left_inner_sensor;
int right_inner_sensor;
int right_outer_sensor;
int MAX_SPEED = 255;  // All MAX_SPEEDS is changed to MAX_SPEED

hp_BH1750 lightSensor;

int lightTurnedOn = 0;
int lightStartTime = 0;
int lightStopTime;
int timeDiff;

void setup() {
  //IR pins
  pinMode(IR_PIN_1, INPUT);
  pinMode(IR_PIN_2, INPUT);
  pinMode(IR_PIN_3, INPUT);
  pinMode(IR_PIN_4, INPUT);

  //driver
  AFMS.begin();

  //motors
  FRONT_LEFT_MOTOR->setSpeed(0);   // BACKWARD represents forward
  BACK_LEFT_MOTOR->setSpeed(0);    // BACKWARD represents forward
  BACK_RIGHT_MOTOR->setSpeed(0);   // BACKWARD represents forward
  FRONT_RIGHT_MOTOR->setSpeed(0);  // BACKWARD represents forward
  FRONT_LEFT_MOTOR->run(RELEASE);
  BACK_LEFT_MOTOR->run(RELEASE);
  BACK_RIGHT_MOTOR->run(RELEASE);
  FRONT_RIGHT_MOTOR->run(RELEASE);

  //light sensor
  lightSensor.begin(BH1750_TO_GROUND);
}

void straight() {  // Works
  //Directions:
  FRONT_LEFT_MOTOR->run(BACKWARD);
  BACK_LEFT_MOTOR->run(BACKWARD);
  //remember, left and right motors are set up in opposite directions
  BACK_RIGHT_MOTOR->run(BACKWARD);
  FRONT_RIGHT_MOTOR->run(BACKWARD);

  //Speed:
  FRONT_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_RIGHT_MOTOR->setSpeed(MAX_SPEED);
  FRONT_RIGHT_MOTOR->setSpeed(MAX_SPEED);
}

void left() {  // Works
  //Directions:
  FRONT_LEFT_MOTOR->run(BACKWARD);
  BACK_LEFT_MOTOR->run(FORWARD);
  //remember, left and right motors are set up in opposite directions
  BACK_RIGHT_MOTOR->run(BACKWARD);
  FRONT_RIGHT_MOTOR->run(BACKWARD);

  //Speed:
  //note: right goes slow, left stays still
  FRONT_LEFT_MOTOR->setSpeed(20);
  BACK_LEFT_MOTOR->setSpeed(20);
  BACK_RIGHT_MOTOR->setSpeed(MAX_SPEED);
  FRONT_RIGHT_MOTOR->setSpeed(MAX_SPEED);
}

void right() {
  //Directions:
  FRONT_LEFT_MOTOR->run(BACKWARD);
  BACK_LEFT_MOTOR->run(BACKWARD);
  //remember, left and right motors are set up in opposite directions
  BACK_RIGHT_MOTOR->run(FORWARD);
  FRONT_RIGHT_MOTOR->run(BACKWARD);

  //Speed:
  FRONT_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_RIGHT_MOTOR->setSpeed(20);
  FRONT_RIGHT_MOTOR->setSpeed(20);
}

void leftSharp() {  // Check motor directions
  // Directions:
  FRONT_LEFT_MOTOR->run(FORWARD);
  BACK_LEFT_MOTOR->run(FORWARD);
  BACK_RIGHT_MOTOR->run(BACKWARD);
  FRONT_RIGHT_MOTOR->run(BACKWARD);

  // Speed:
  // Note: right goes slow, left stays still
  FRONT_LEFT_MOTOR->setSpeed((MAX_SPEED / 2) + 70);
  BACK_LEFT_MOTOR->setSpeed((MAX_SPEED / 2) + 70);
  BACK_RIGHT_MOTOR->setSpeed(MAX_SPEED);
  FRONT_RIGHT_MOTOR->setSpeed(MAX_SPEED);
}

void rightSharp() {  // Check motor directions such that it turn on the spot, not curve
  //Directions:
  FRONT_LEFT_MOTOR->run(BACKWARD);
  BACK_LEFT_MOTOR->run(BACKWARD);
  //remember, left and right motors are set up in opposite directions
  BACK_RIGHT_MOTOR->run(FORWARD);
  FRONT_RIGHT_MOTOR->run(FORWARD);

  //Speed:
  FRONT_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_RIGHT_MOTOR->setSpeed((MAX_SPEED / 2) + 70);
  FRONT_RIGHT_MOTOR->setSpeed((MAX_SPEED / 2) + 70);
}

void reverse() {
  //Directions:
  FRONT_LEFT_MOTOR->run(FORWARD);
  BACK_LEFT_MOTOR->run(BACKWARD);
  //remember, left and right motors are set up in opposite directions
  BACK_RIGHT_MOTOR->run(BACKWARD);
  FRONT_RIGHT_MOTOR->run(FORWARD);

  //Speed:
  FRONT_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_LEFT_MOTOR->setSpeed(MAX_SPEED);
  BACK_RIGHT_MOTOR->setSpeed(MAX_SPEED);
  FRONT_RIGHT_MOTOR->setSpeed(MAX_SPEED);
}

void T_intersection() {

  leftSharp();
  // Read the sensor values again
  int left_outer_sensor = digitalRead(IR_PIN_1);
  int left_inner_sensor = digitalRead(IR_PIN_2);
  int right_inner_sensor = digitalRead(IR_PIN_3);
  int right_outer_sensor = digitalRead(IR_PIN_4);
  if (left_outer_sensor == 0 && left_inner_sensor == 0 && right_inner_sensor == 0 && right_outer_sensor == 0) {
    rightSharp();
    rightSharp();
  }
}

void intersection() {
  straight();
  delay(1999);

  // Read the sensor values again
  int left_outer_sensor = digitalRead(IR_PIN_1);
  int left_inner_sensor = digitalRead(IR_PIN_2);
  int right_inner_sensor = digitalRead(IR_PIN_3);
  int right_outer_sensor = digitalRead(IR_PIN_4);

  if (left_outer_sensor == 1 && left_inner_sensor == 1 && right_inner_sensor == 1 && right_outer_sensor == 1) {
    reverse();
    delay(1999);
    T_intersection();
  }
}

void stop() {
  FRONT_LEFT_MOTOR->setSpeed(0);
  BACK_LEFT_MOTOR->setSpeed(0);
  BACK_RIGHT_MOTOR->setSpeed(0);
  FRONT_RIGHT_MOTOR->setSpeed(0);
  FRONT_LEFT_MOTOR->run(RELEASE);
  BACK_LEFT_MOTOR->run(RELEASE);
  BACK_RIGHT_MOTOR->run(RELEASE);
  FRONT_RIGHT_MOTOR->run(RELEASE);
}

void loop() {
  //light sensor (robot initialization step)

  lightSensor.start();
  int lux = lightSensor.getLux();

  if (lux > 1000) {  // To start robot
    lightStopTime = millis();
    timeDiff = lightStopTime - lightStartTime;
    if (lightTurnedOn == 0 && timeDiff > 2000) {
      Serial.println("On");
      lightTurnedOn = 1;
      lightStartTime = millis();
    }

    timeDiff = lightStopTime - lightStartTime;
    if (lightTurnedOn == 1 && timeDiff > 2000) {
      lightTurnedOn = 0;
      Serial.println("off");
      lightStartTime = millis();
    }
  }

  if (lightTurnedOn == 1) {

    //black returns 1 (lights off), white returns 0 (lights on)

    left_outer_sensor = digitalRead(IR_PIN_1);
    left_inner_sensor = digitalRead(IR_PIN_2);
    right_inner_sensor = digitalRead(IR_PIN_3);
    right_outer_sensor = digitalRead(IR_PIN_4);

    // Directions:

    if (left_outer_sensor == 0 && left_inner_sensor == 1 && right_inner_sensor == 1 && right_outer_sensor == 0) {  // straight
      straight();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 1 && right_inner_sensor == 0 && right_outer_sensor == 0) {  // curve
      left();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 0 && right_inner_sensor == 1 && right_outer_sensor == 0) {  // curve
      right();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 1 && right_inner_sensor == 1 && right_outer_sensor == 0) {  // 90 degree
      leftSharp();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 1 && right_inner_sensor == 1 && right_outer_sensor == 1) {  // 90 degree
      rightSharp();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 0 && right_inner_sensor == 1 && right_outer_sensor == 1) {  // curve
      rightSharp();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 1 && right_inner_sensor == 0 && right_outer_sensor == 0) {  // curve
      leftSharp();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 1 && right_inner_sensor == 1 && right_outer_sensor == 1) {  // curve
      straight();
    }

    // less important:
    else if (left_outer_sensor == 0 && left_inner_sensor == 1 && right_inner_sensor == 0 && right_outer_sensor == 1) {  // Intersection & dashed line
      straight();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 0 && right_inner_sensor == 0 && right_outer_sensor == 0) {  // Intersection & dashed line
      left();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 0 && right_inner_sensor == 1 && right_outer_sensor == 1) {  // Intersection & dashed line
      right();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 0 && right_inner_sensor == 1 && right_outer_sensor == 0) {  // Intersection & dashed line
      left();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 1 && right_inner_sensor == 0 && right_outer_sensor == 1) {  // Intersection & dashed line
      straight();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 0 && right_inner_sensor == 1 && right_outer_sensor == 1) {  // Intersection & dashed line
      straight();
    } else if (left_outer_sensor == 0 && left_inner_sensor == 0 && right_inner_sensor == 0 && right_outer_sensor == 0) {  // Intersection & dashed line
      straight();
    } else if (left_outer_sensor == 1 && left_inner_sensor == 0 && right_inner_sensor == 0 && right_outer_sensor == 1) {  // 2 way curved intersection
      straight();
    }  // bottom
  } else {
    stop();
  }
}
